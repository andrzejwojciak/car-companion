@page "/cars"
@using CarCompanion.Shared.Contract.V1.Responses.Car
@using CarCompanion.UI.Services.Interfaces

@inject HttpClient Http
@inject IAuthService AuthService
@inject ICarService CarService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorageService


<h3>
    Your cars:
</h3>

@if (_response == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (_response.IsSuccessStatusCode)
    {
        <table class="table">
            <thead>
            <tr>
                <td>MainName</td>
                <td>Brand</td>
                <td>Model</td>
                <td>Generation</td>
                <td></td>
            </tr>
            </thead>
            <tbody>
            @foreach (var car in _getUserCarsResponse.Cars)
            {
                <tr>
                    <td>@car.MainName</td>
                    <td>@car.Brand</td>
                    <td>@car.Model</td>
                    <td>@car.Generation</td>
                    <td>
                        <a href="cars/@car.CarId" >
                            More info
                        </a>
                    </td>
                </tr>
            }
            </tbody>
        </table> 
    }
    else
    {
        <p><em>You might not have access to this resources</em></p>
    }
}

@code {
    
    private GetUserCarsResponse _getUserCarsResponse;
    private HttpResponseMessage _response;
    private const string Url = "http://localhost:8080/api/v1/cars";

    protected override async Task OnInitializedAsync()
    {
        if (!await AuthService.IsAuthorizedAsync())
        {
            NavigationManager.NavigateTo("Login");
        }

        var accessToken = await LocalStorageService.GetItem<string>("accessToken");
        
        var httpRequestMessage = new HttpRequestMessage
        {
            Method = HttpMethod.Get,
            RequestUri = new Uri(Url),
            Headers =
            {
                {"Authorization", $"Bearer {accessToken}"},
                {"Accept", "application/json"}
            }
        };
        
        _response = await Http.SendAsync(httpRequestMessage);
        
        if (_response.IsSuccessStatusCode)
        {
            _getUserCarsResponse = await _response.Content.ReadFromJsonAsync<GetUserCarsResponse>();
        }
    }
}