// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using carcompanion.Data;

namespace carcompanion.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210116170823_add-user-role")]
    partial class adduserrole
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("carcompanion.Models.Car", b =>
                {
                    b.Property<Guid>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Generation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("int");

                    b.HasKey("CarId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("carcompanion.Models.Expense", b =>
                {
                    b.Property<Guid>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndOfDateInterval")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MileageInterval")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExpenseId");

                    b.HasIndex("CarId");

                    b.HasIndex("UserId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("carcompanion.Models.ExpenseCategory", b =>
                {
                    b.Property<string>("ExpenseCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExpenseCategoryId");

                    b.ToTable("ExpenseCategories");

                    b.HasData(
                        new
                        {
                            ExpenseCategoryId = "other"
                        },
                        new
                        {
                            ExpenseCategoryId = "insurance"
                        },
                        new
                        {
                            ExpenseCategoryId = "repair"
                        },
                        new
                        {
                            ExpenseCategoryId = "fuel"
                        },
                        new
                        {
                            ExpenseCategoryId = "utilization"
                        });
                });

            modelBuilder.Entity("carcompanion.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessTokenJti")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RefreshTokenId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("carcompanion.Models.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = "user"
                        },
                        new
                        {
                            RoleId = "superUser"
                        },
                        new
                        {
                            RoleId = "admin"
                        });
                });

            modelBuilder.Entity("carcompanion.Models.ShareKey", b =>
                {
                    b.Property<Guid>("ShareKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IssuerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<string>("UserCarRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShareKeyId");

                    b.HasIndex("CarId");

                    b.HasIndex("IssuerId");

                    b.HasIndex("UserCarRoleId");

                    b.ToTable("ShareKeys");
                });

            modelBuilder.Entity("carcompanion.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d9b78b4b-9d30-4c7f-8b98-951a4539246f"),
                            AddedDate = new DateTime(2021, 1, 16, 18, 8, 22, 778, DateTimeKind.Local).AddTicks(2494),
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            Password = "b7F7UYpUwpYZBbIsp0McRFp+/LAtS9e8zZsDF1sYKbw=",
                            RoleId = "admin"
                        },
                        new
                        {
                            UserId = new Guid("d561f14f-23d0-4fbf-8539-415ca52d5337"),
                            AddedDate = new DateTime(2021, 1, 16, 18, 8, 22, 781, DateTimeKind.Local).AddTicks(8343),
                            Email = "superuser@example.com",
                            EmailConfirmed = false,
                            Password = "b7F7UYpUwpYZBbIsp0McRFp+/LAtS9e8zZsDF1sYKbw=",
                            RoleId = "superUser"
                        },
                        new
                        {
                            UserId = new Guid("d56faaab-a0df-4124-a3ff-08164eb27962"),
                            AddedDate = new DateTime(2021, 1, 16, 18, 8, 22, 781, DateTimeKind.Local).AddTicks(8399),
                            Email = "firstuser@example.com",
                            EmailConfirmed = false,
                            Password = "b7F7UYpUwpYZBbIsp0McRFp+/LAtS9e8zZsDF1sYKbw=",
                            RoleId = "user"
                        },
                        new
                        {
                            UserId = new Guid("1c5ce31e-f130-406b-9c1e-56d1c75c629f"),
                            AddedDate = new DateTime(2021, 1, 16, 18, 8, 22, 781, DateTimeKind.Local).AddTicks(8409),
                            Email = "secounduser@example.com",
                            EmailConfirmed = false,
                            Password = "b7F7UYpUwpYZBbIsp0McRFp+/LAtS9e8zZsDF1sYKbw=",
                            RoleId = "user"
                        });
                });

            modelBuilder.Entity("carcompanion.Models.UserCar", b =>
                {
                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserCarRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CarId", "UserId");

                    b.HasIndex("UserCarRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCars");
                });

            modelBuilder.Entity("carcompanion.Models.UserCarRole", b =>
                {
                    b.Property<string>("UserCarRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserCarRoleId");

                    b.ToTable("UserCarRoles");

                    b.HasData(
                        new
                        {
                            UserCarRoleId = "owner"
                        },
                        new
                        {
                            UserCarRoleId = "editor"
                        },
                        new
                        {
                            UserCarRoleId = "viewer"
                        });
                });

            modelBuilder.Entity("carcompanion.Models.Expense", b =>
                {
                    b.HasOne("carcompanion.Models.Car", "Car")
                        .WithMany("Expenses")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("carcompanion.Models.User", "User")
                        .WithMany("Expenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("carcompanion.Models.ShareKey", b =>
                {
                    b.HasOne("carcompanion.Models.Car", "Car")
                        .WithMany("ShareKeys")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("carcompanion.Models.User", "Issuer")
                        .WithMany("ShareKeys")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("carcompanion.Models.UserCarRole", "UserCarRole")
                        .WithMany("ShareKeys")
                        .HasForeignKey("UserCarRoleId");
                });

            modelBuilder.Entity("carcompanion.Models.User", b =>
                {
                    b.HasOne("carcompanion.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("carcompanion.Models.UserCar", b =>
                {
                    b.HasOne("carcompanion.Models.Car", "Car")
                        .WithMany("UserCars")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("carcompanion.Models.UserCarRole", "UserCarRole")
                        .WithMany("UserCars")
                        .HasForeignKey("UserCarRoleId");

                    b.HasOne("carcompanion.Models.User", "User")
                        .WithMany("UserCars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
