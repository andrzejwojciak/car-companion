@layout LoginLayout
@page "/login"

@using CarCompanion.Shared.Contract.Security.Requests
@using CarCompanion.Shared.Contract.Security.Responses
@using CarCompanion.Shared.Results
@using CarCompanion.UI.Services.Interfaces

@inject HttpClient HttpClient
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div>
    <Validations @ref="loginValidations" Mode="ValidationMode.Auto" Model="@loginRequest" ValidateOnLoad="false">
        <Validation>
            <Field>
                <FieldLabel>Email address</FieldLabel>
                <TextEdit Placeholder="Enter email" @bind-Text="@loginRequest.Email">
                    <FieldHelp>Please enter a valid email address</FieldHelp>
                </TextEdit>
            </Field>
        </Validation>
        <Validation>
            <Field>
                <FieldLabel>Password</FieldLabel>
                <TextEdit type="password" Placeholder="Enter email" @bind-Text="@loginRequest.Password">
                    <FieldHelp>Please enter a valid password</FieldHelp>
                </TextEdit>
            </Field>
        </Validation>
        <Button Color="Color.Primary" Clicked="@Submit">
            @if (loading)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            Login
        </Button>
    </Validations>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p style="color: #ff0000;">@errorMessage</p>
    }

</div>


@code {
    private ServiceResult<AuthSuccessResponse> result;
    Validations loginValidations;
    private LoginRequest loginRequest = new();
    private string errorMessage;
    private bool loading;

    protected override async void OnInitialized()
    {
        if (await AuthService.IsAuthorizedAsync())
        {
            NavigationManager.NavigateTo("");
        }
    }

    private void Submit()
    {
        if (loginValidations.ValidateAll())
        {
            SendLoginRequest();
        }
    }

    private async void SendLoginRequest()
    {
        loading = true;
        result = await AuthService.LoginAsync(loginRequest.Email, loginRequest.Password);

        if (result.Success)
        {
            NavigationManager.NavigateTo("/");
        }

        errorMessage = "Wrong login or password";
        loading = false;
        StateHasChanged();
    }

}