@using CarCompanion.Shared.Contract.V1.Requests.Expense
@using CarCompanion.Shared.Contract.V1.Responses.Expense
@using CarCompanion.Shared.Results
@using CarCompanion.UI.Services.Interfaces

@inject IExpenseService ExpenseService

<Button Clicked="@ShowModal" Color="Color.Warning">Edit</Button>

<Modal @ref="editExpenseModal">
    <ModalBackdrop/>
    <ModalContent IsCentered="true">
        <ModalHeader>
            <ModalTitle>Update expense</ModalTitle>
            <CloseButton Clicked="@HideModal"/>
        </ModalHeader>
        <ModalBody>
            <h4>Important. insert only fileds you want to update!</h4>
            <Validations @ref="editExpenseValidation" Mode="ValidationMode.Auto" Model="@request" ValidateOnLoad="false">
                <Validation>
                    <Field>
                        <FieldLabel>Amount</FieldLabel>
                        <NumericEdit Placeholder="Amount" @bind-Value="@request.Amount">
                            <FieldHelp>Please enter a amount</FieldHelp>
                        </NumericEdit>
                    </Field>
                </Validation>
                <Validation>
                    <Field>
                        <FieldLabel>Description</FieldLabel>
                        <TextEdit Placeholder="Description" @bind-Text="@request.Description">
                            <FieldHelp>Please enter a description</FieldHelp>
                        </TextEdit>
                    </Field>
                </Validation>
                <Validation>
                    <Field>
                        <FieldLabel>Next #interval, replacement# for:</FieldLabel>
                        <NumericEdit Placeholder="Mileage interval" @bind-Value="@request.MileageInterval">
                            <FieldHelp>Please enter a mileage interval</FieldHelp>
                        </NumericEdit>
                    </Field>
                </Validation>
                <Validation>
                    <Field>
                        <FieldLabel>Next #interval, replacement# at:</FieldLabel>
                        <DateEdit @bind-Date="@request.EndOfDateInterval">
                            <FieldHelp>Please enter a date interval</FieldHelp>
                        </DateEdit>
                    </Field>
                </Validation>
                <Validation>
                    <Field>
                        <FieldLabel>Category</FieldLabel>
                        <Select @bind-SelectedValue="@request.Category">
                            <SelectItem Value="@(string.Empty)">Select category</SelectItem>
                            <SelectItem Value="@("fuel")">Fuel</SelectItem>
                            <SelectItem Value="@("insurance")">Insurance</SelectItem>
                            <SelectItem Value="@("other")">Other</SelectItem>
                            <SelectItem Value="@("repair")">Repair</SelectItem>
                            <SelectItem Value="@("utilization")">Utilization</SelectItem>
                        </Select>
                    </Field>
                </Validation>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@Submit">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Update
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>


@code {

    [Parameter]
    public string CarId { get; set; }

    [Parameter]
    public string ExpenseId { get; set; }
    
    [Parameter]
    public EventCallback<Task> UpdateExpenses { get; set; }

    private bool loading;
    private Modal editExpenseModal;
    private Validations editExpenseValidation;
    private PatchExpenseRequest request = new();
    //TODO: Need to create PatchExpenseResponse instead of ExpenseResponse
    private ServiceResult<ExpenseResponse> result;

    private void ShowModal()
    {
        editExpenseValidation.ClearAll();
        request = new PatchExpenseRequest();

        editExpenseModal.Show();
    }

    private void HideModal()
    {
        editExpenseModal.Hide();
    }

    private void Submit()
    {
        if (editExpenseValidation.ValidateAll())
        {
            EditExpenseAsync();
        }
    }

    private async void EditExpenseAsync()
    {
        loading = true;
        result = await ExpenseService.UpdateExpenseAsync(request, CarId, ExpenseId);
        await UpdateExpenses.InvokeAsync();
        loading = false;
        HideModal();
    }

}